// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/campaign/mailer_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/campaign/mailer_interface.go -destination=internal/domain/campaign/mock/mailer_mock.go
//
// Package mock_campaign is a generated GoMock package.
package mock_campaign

import (
	campaign "email-dispatch-gateway/internal/domain/campaign"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailerInterface is a mock of MailerInterface interface.
type MockMailerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMailerInterfaceMockRecorder
}

// MockMailerInterfaceMockRecorder is the mock recorder for MockMailerInterface.
type MockMailerInterfaceMockRecorder struct {
	mock *MockMailerInterface
}

// NewMockMailerInterface creates a new mock instance.
func NewMockMailerInterface(ctrl *gomock.Controller) *MockMailerInterface {
	mock := &MockMailerInterface{ctrl: ctrl}
	mock.recorder = &MockMailerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailerInterface) EXPECT() *MockMailerInterfaceMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockMailerInterface) SendMail(campaign *campaign.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockMailerInterfaceMockRecorder) SendMail(campaign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockMailerInterface)(nil).SendMail), campaign)
}
