// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/campaign/repository_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/campaign/repository_interface.go -destination=internal/domain/campaign/mock/repository_mock.go
//
// Package mock_campaign is a generated GoMock package.
package mock_campaign

import (
	campaign "email-dispatch-gateway/internal/domain/campaign"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositoryInterface) Create(campaign *campaign.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryInterfaceMockRecorder) Create(campaign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryInterface)(nil).Create), campaign)
}

// Delete mocks base method.
func (m *MockRepositoryInterface) Delete(campaign *campaign.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryInterfaceMockRecorder) Delete(campaign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositoryInterface)(nil).Delete), campaign)
}

// GetByID mocks base method.
func (m *MockRepositoryInterface) GetByID(id string) (*campaign.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*campaign.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockRepositoryInterface) Update(campaign *campaign.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", campaign)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryInterfaceMockRecorder) Update(campaign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryInterface)(nil).Update), campaign)
}
